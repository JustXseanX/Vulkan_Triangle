//-------------------------------------------------------------------------------------------------
// File : asvkBlob.cpp
// Desc : Byte Length Object Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <asvkBlob.h>
#include <asvkLogger.h>
#include <atomic>
#include <cstdio>


namespace asvk {

///////////////////////////////////////////////////////////////////////////////////////////////////
// Blob class
///////////////////////////////////////////////////////////////////////////////////////////////////
class Blob : public IBlob
{
    //=============================================================================================
    // list of friend classes and methods. 
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      生成処理を行います.
    //!
    //! @param[in]      size        メモリ確保サイズです.
    //---------------------------------------------------------------------------------------------
    static Blob* Create(size_t size)
    {
        auto ptr = new(std::nothrow) Blob();
        if (ptr == nullptr)
        {
            ELOG( "Error : Out of Memory." );
            return nullptr;
        }

        if (!ptr->Init(size))
        {
            ELOG( "Error : Blob::Init() Failed." );
            ptr->Release();
            return nullptr;
        }

        return ptr;
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      バッファポインタを取得します.
    //!
    //! @return     バッファポインタを返却します.
    //---------------------------------------------------------------------------------------------
    void* GetBufferPointer() const override
    { return m_pBufferPointer; }

    //---------------------------------------------------------------------------------------------
    //! @brief      バッファサイズを取得します.
    //!
    //! @return     バッファサイズを返却します.
    //---------------------------------------------------------------------------------------------
    size_t GetBufferSize() const override
    { return m_BufferSize; }

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウントを増やします.
    //---------------------------------------------------------------------------------------------
    void AddRef() override
    { m_Count++; }

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウントを減らします.
    //---------------------------------------------------------------------------------------------
    void Release() override
    {
        m_Count--;
        if (m_Count == 0)
        { delete this; }
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウントを取得します.
    //---------------------------------------------------------------------------------------------
    uint32_t GetCount() const override
    { return m_Count; }

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    std::atomic<uint32_t>   m_Count;            //!< 参照カウントです.
    size_t                  m_BufferSize;       //!< バッファサイズです.
    void*                   m_pBufferPointer;   //!< バッファポインタです.

    //=============================================================================================
    // private methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Blob()
    : m_Count           (1)
    , m_BufferSize      (0)
    , m_pBufferPointer  (nullptr)
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    ~Blob()
    {
        if (m_pBufferPointer != nullptr)
        { free(m_pBufferPointer); }
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //---------------------------------------------------------------------------------------------
    bool Init(size_t size)
    {
        m_pBufferPointer = malloc(size);
        m_BufferSize     = size;
        return m_pBufferPointer != nullptr;
    }

    Blob             (const Blob&) = delete;    // アクセス禁止.
    Blob& operator = (const Blob&) = delete;    // アクセス禁止.
};

//-------------------------------------------------------------------------------------------------
//      ファイルから読み込みします.
//-------------------------------------------------------------------------------------------------
bool ReadFileToBlob(const wchar_t* filename, IBlob** ppOut)
{
    // 引数チェック.
    if (filename == nullptr || ppOut == nullptr)
    {
        ELOG( "Error : Invalid Argument." );
        return false;
    }

    FILE* pFile;

    // ファイルオープン.
    auto err = _wfopen_s( &pFile, filename, L"rb" );
    if ( err != 0 )
    {
        ELOG( "Error : File Open Failed. filename = %lS", filename );
        return false;
    }

    auto start = ftell(pFile);
    fseek(pFile, 0, SEEK_END);
    auto end = ftell(pFile);
    fseek(pFile, 0, SEEK_SET);

    // サイズを求める.
    auto size = size_t(end - start);

    // バイト長オブジェクト生成.
    auto blob = Blob::Create(size);
    if (blob == nullptr)
    {
        ELOG( "Error : Blob::Create() Failed. size = %lu", size );
        fclose(pFile);
        return false;
    }

    // ポインタ取得.
    auto ptr = blob->GetBufferPointer();

    // 読み込み.
    fread(ptr, size, 1, pFile);

    // ファイルクローズ.
    fclose( pFile );

    // 出力値を設定.
    *ppOut = blob;

    // 正常終了.
    return true;
}

//-------------------------------------------------------------------------------------------------
//      ファイルに書き込みします.
//-------------------------------------------------------------------------------------------------
bool WriteBlobToFile(const wchar_t* filename, const IBlob* pBlob)
{
    // 引数チェック.
    if (filename == nullptr || pBlob == nullptr)
    {
        ELOG( "Error : Invalid Argument." );
        return false;
    }

    FILE* pFile;

    // ファイルオープン.
    auto err = _wfopen_s( &pFile, filename, L"wb" );
    if ( err != 0 )
    {
        ELOG( "Error : File Open Failed. filename = %lS", filename );
        return false;
    }

    // 書き込み.
    fwrite( pBlob->GetBufferPointer(), pBlob->GetBufferSize(), 1, pFile );

    // ファイルクローズ.
    fclose( pFile );

    // 正常終了.
    return true;
}

} // namespace asvk

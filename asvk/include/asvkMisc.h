//-------------------------------------------------------------------------------------------------
// File : asvkMisc.h
// Desc : Utility Moudle.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <asvkTypedef.h>
#include <string>
#include <vector>


namespace asvk {

//-------------------------------------------------------------------------------------------------
//! @brief      指定された数値の倍数に切り上げます.
//!
//! @param [in]     val     数値.
//! @param [in]     base    倍数.
//! @return     val を base の倍数に切り上げた結果を返却します.
//-------------------------------------------------------------------------------------------------
ASVK_INLINE
uint32_t RoundUp( uint32_t val, uint32_t base )
{ return ( val + ( base - 1 ) ) & ~( base - 1 ); }

//-------------------------------------------------------------------------------------------------
//! @brief      指定された数値の倍数に切り上げます.
//!
//! @param [in]     val     数値.
//! @param [in]     base    倍数.
//! @return     val を base の倍数に切り上げた結果を返却します.
//-------------------------------------------------------------------------------------------------
ASVK_INLINE
uint64_t RoundUp( uint64_t val, uint64_t base )
{ return ( val + ( base - 1 ) ) & ~( base - 1 ); }

//-------------------------------------------------------------------------------------------------
//! @brief      指定された数値の倍数に切り下げます.
//!
//! @param [in]     val     数値.
//! @param [in]     base    倍数.
//! @return     val を base の倍数に切り下げた結果を返却します.
//-------------------------------------------------------------------------------------------------
ASVK_INLINE
uint32_t RoundDown( uint32_t val, uint32_t base )
{ return  val & ~( base - 1 ); }

//-------------------------------------------------------------------------------------------------
//! @brief      指定された数値の倍数に切り下げます.
//!
//! @param [in]     val     数値.
//! @param [in]     base    倍数.
//! @return     val を base の倍数に切り下げた結果を返却します.
//-------------------------------------------------------------------------------------------------
ASVK_INLINE
uint64_t RoundDown( uint64_t val, uint64_t base )
{ return  val & ~( base - 1 ); }

//-------------------------------------------------------------------------------------------------
//! @brief      ファイルパスを検索します.
//!
//! @param[in]      filePath        検索するファイスパス.
//! @param[out]     result          検索結果の格納先.
//! @retval true    ファイルを発見.
//! @retval false   ファイルが見つからなかった.
//! @memo 検索ルールは以下の通り.
//!      .\
//!      ..\
//!      ..\..\
//!      .\res\
//!      %EXE_DIR%\
//!      %EXE_DIR%\..\
//!      %EXE_DIR%\..\..\
//!      %EXE_DIR%\res\
//-------------------------------------------------------------------------------------------------
bool SearchFilePath( const wchar_t* filePath, std::wstring& result );

//-------------------------------------------------------------------------------------------------
//! @brief      ディレクトリ名を取得します.
//!
//! @param[in]      filePath        ファイルパス.
//! @return     指定されたファイルパスからディレクトリ名を抜き出します.
//-------------------------------------------------------------------------------------------------
std::wstring GetDirectoryPath( const wchar_t* fielPath );

//-------------------------------------------------------------------------------------------------
//! @brief      拡張子を取得します.
//!
//! @param[in]      filePath        ファイルパス.
//! @return     指定されたファイルパスから拡張子を抜き出します.
//-------------------------------------------------------------------------------------------------
std::wstring GetExt( const wchar_t* filePath );

//-------------------------------------------------------------------------------------------------
//! @brief      拡張子無しのファイルパスを取得します.
//!
//! @param[in]      filePath        ファイルパス.
//! @return     指定されたファイルパスから拡張子を取り除いたファイルパスを返却します.
//-------------------------------------------------------------------------------------------------
std::wstring GetPathWithoutExt( const wchar_t* filePath );

//-------------------------------------------------------------------------------------------------
//! @brief      実行ファイルのファイルパスを取得します.
//!
//! @return     実行ファイルのファイルパスを返却します.
//-------------------------------------------------------------------------------------------------
std::wstring GetExePath();

//-------------------------------------------------------------------------------------------------
//! @brief      指定されたファイルパスが存在するかチェックします.
//!
//! @param[in]      filePath        チェックするファイルパス.
//! @return     指定されたファイルパスが存在する場合はtrueを返却します.
//-------------------------------------------------------------------------------------------------
bool IsExistFilePath( const wchar_t* filePath );

//-------------------------------------------------------------------------------------------------
//! @brief      指定されたフォルダパスが存在するかチェックします.
//!
//! @param[in]      folderPath      チェックするフォルダパス.
//! @return     指定されたフォルダパスが存在する場合はtrueを返却します.
//-------------------------------------------------------------------------------------------------
bool IsExistFolderPath( const wchar_t* folderPath );

//-------------------------------------------------------------------------------------------------
//! @brief      ワイド文字列に変換します.
//!
//! @param[in]      value       変換するマルチバイト文字列.
//! @return     指定された文字列をワイド文字列に変換した結果を返却します.
//-------------------------------------------------------------------------------------------------
std::wstring ToStringW( const std::string& value );

//-------------------------------------------------------------------------------------------------
//! @brief      マルチバイト文字列に変換します.
//!
//! @param[in]      value       変換するワイド文字列.
//! @return     指定された文字列をマルチバイト文字列に変換した結果を返却します.
//-------------------------------------------------------------------------------------------------
std::string  ToStringA( const std::wstring& value );

//-------------------------------------------------------------------------------------------------
//! @brief      指定文字で文字列を分割します.
//!
//! @param[in]      value       入力文字列.
//! @param[in]      delimiter   分割文字.
//! @return     指定文字で分割された文字列の配列を返却します.
//-------------------------------------------------------------------------------------------------
std::vector<std::string> Split( const std::string& value, char delimiter );

//-------------------------------------------------------------------------------------------------
//! @brief      指定文字で文字列を分割します.
//!
//! @param[in]      value       入力文字列.
//! @param[in]      delimiter   分割文字.
//! @return     指定文字で分割された文字列の配列を返却します.
//-------------------------------------------------------------------------------------------------
std::vector<std::wstring> Split( const std::wstring& value, wchar_t delimiter );

} // namespacec asdx
